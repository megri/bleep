"use strict";(self.webpackChunkbleep_site=self.webpackChunkbleep_site||[]).push([[428],{9024:(e,t,a)=>{a.d(t,{F:()=>s});var n=a(7294),l=a(1262);const o=e=>{let{src:t,...l}=e;const o=n.useRef(null);return n.useEffect((()=>{const e=a(4128),n=o.current;n&&e.create(t,n,l)}),[t,o]),n.createElement("div",{ref:o})},s=e=>n.createElement(l.Z,null,(()=>n.createElement(o,e)))},2782:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>u});var n=a(7462),l=(a(7294),a(3905)),o=(a(814),a(6182)),s=a(9024),i=a(2876);const r={},p="The case for `bleep`",d={unversionedId:"blog/the-case-for-bleep",id:"blog/the-case-for-bleep",title:"The case for `bleep`",description:"I have read the recent discussions about sbt 2 and also",source:"@site/docs/blog/the-case-for-bleep.mdx",sourceDirName:"blog",slug:"/blog/the-case-for-bleep",permalink:"/docs/blog/the-case-for-bleep",draft:!1,tags:[],version:"current",frontMatter:{}},c={},u=[{value:"First, let&#39;s talk about Bloop",id:"first-lets-talk-about-bloop",level:2},{value:"The Bloop model",id:"the-bloop-model",level:3},{value:"towards a portable Bloop model",id:"towards-a-portable-bloop-model",level:3},{value:"Towards a non-verbose Bloop model",id:"towards-a-non-verbose-bloop-model",level:3},{value:"Built-in cross-compilation",id:"built-in-cross-compilation",level:2},{value:"Build as data",id:"build-as-data",level:2},{value:"When build as data is not enough",id:"when-build-as-data-is-not-enough",level:2},{value:"Developer experience",id:"developer-experience",level:2},{value:"Performance, performance, performance",id:"performance-performance-performance",level:3},{value:"There are two things which can be slow in <code>bleep</code>:",id:"there-are-two-things-which-can-be-slow-in-bleep",level:4},{value:"Resolving dependencies",id:"resolving-dependencies",level:5},{value:"Starting a JVM",id:"starting-a-jvm",level:5},{value:"Usability",id:"usability",level:3},{value:"Creating a build should be trivial",id:"creating-a-build-should-be-trivial",level:4},{value:"File system matters",id:"file-system-matters",level:4},{value:"Tab completion",id:"tab-completion",level:4},{value:"You can easily mount a subset of projects into your IDE",id:"you-can-easily-mount-a-subset-of-projects-into-your-ide",level:4},{value:"IDE reloads automatically",id:"ide-reloads-automatically",level:4},{value:"Migration strategy",id:"migration-strategy",level:2}],m={toc:u};function h(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"the-case-for-bleep"},"The case for ",(0,l.kt)("inlineCode",{parentName:"h1"},"bleep")),(0,l.kt)("p",null,"I have read the recent discussions about sbt 2 and also\nJohn de Goes' ",(0,l.kt)("a",{parentName:"p",href:"https://degoes.net/articles/new-scala-build-tool"},"call for a new Scala build tool"),"\nwith great interest."),(0,l.kt)("p",null,"I have worked with Scala professionally for a decade,\nand have strong feelings about the current build tools."),(0,l.kt)("p",null,"So great in fact, that a year ago I started writing my own (but built on existing, strong foundations!)"),(0,l.kt)("p",null,"Despite people poking fun at the number of failed Scala build tools,\nI think it's realistic for many projects to replace sbt. The key is seamless migration - more on that later."),(0,l.kt)("p",null,"Note that it's still early days for ",(0,l.kt)("inlineCode",{parentName:"p"},"bleep"),", so if the ideas resonate with you, please get involved!"),(0,l.kt)("h2",{id:"first-lets-talk-about-bloop"},"First, let's talk about Bloop"),(0,l.kt)("p",null,"I see Bloop as a great step forward for Scala tooling."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"it has great integration with build tools and IDEs through BSP (Build Server Protocol)"),(0,l.kt)("li",{parentName:"ul"},"it provides very good performance through a long-lived, warm JVM"),(0,l.kt)("li",{parentName:"ul"},"it can deduplicate effort between build tools")),(0,l.kt)("h3",{id:"the-bloop-model"},"The Bloop model"),(0,l.kt)("p",null,"More importantly through, Bloop proves that all Scala builds are simple!\nDon't believe me? All the builds I've tried can be exported to a bunch of static json files!\nThen you can compile them, test them, run them, debug them, ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/hamnis/bloop-packager"},"package them")," and more."),(0,l.kt)("p",null,"This proves to me that the the Bloop model is good enough to form the basis of a build tool.\nThe only problem is that the files are incredibly verbose, and not portable."),(0,l.kt)("p",null,"Let's see where this leads us..."),(0,l.kt)("h3",{id:"towards-a-portable-bloop-model"},"towards a portable Bloop model"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"relative paths:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-diff"},'-        "sources": [\n-            "/Users/oyvind/pr/playframework/core/play/src/main/scala",\n-        ],\n+        sources: ./src/main/scala\n')),(0,l.kt)("p",null,"(relative to project directory)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"use coursier to resolve dependencies")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-diff"},'-        "classpath": [\n-            "/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/play/twirl-api_2.13/1.6.0-M6/twirl-api_2.13-1.6.0-M6.jar",\n-        ]\n+        dependencies: com.typesafe.play::twirl-api:1.6.0-M6\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"use coursier to manage JVM")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-diff"},'-        "platform": {\n-            "name": "jvm",\n-            "config": {\n-                "home": "/Users/oyvind/Library/Java/JavaVirtualMachines/openjdk-18.0.1.1/Contents/Home",\n-            },\n-        }\n+  jvm: adoptium:1.18.0.1 # shared for entire build\n   projects:\n     name: play\n     platform:\n         name: jvm\n')),(0,l.kt)("p",null,"Note that ",(0,l.kt)("inlineCode",{parentName:"p"},"bleep")," is serious about managing JVMs. It'll start a Bloop server running your chosen JVM to ensure that's what you use."),(0,l.kt)("h3",{id:"towards-a-non-verbose-bloop-model"},"Towards a non-verbose Bloop model"),(0,l.kt)("p",null,"Deduplicate with templates:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-diff"},"-projects:\n-  kernel:\n-    platform:\n-      name: jvm\n-  core:\n-   dependsOn: kernel\n-   platform:\n-     name: jvm\n+projects:\n+  kernel:\n+    extends: common\n+  core:\n+    dependsOn: kernel\n+    extends: common\n+templates:\n+  common:\n+    platform:\n+      name: jvm\n")),(0,l.kt)("h2",{id:"built-in-cross-compilation"},"Built-in cross-compilation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"projects:\n  core:\n    dependencies: com.olvind.tui::tui:0.0.5\n    cross:\n      jvm3:\n        scala:\n          version: 3.0.0\n      jvm213:\n        scala:\n          version: 2.13.0\n    platform:\n      name: jvm\n")),(0,l.kt)("p",null,"In fact anything can vary, and you can use any names. These are just variations of the same project"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"projects:\n  core:\n    cross:\n      ce2:\n        dependencies: org.typelevel::cats-effect:jar:2.5.5\n      ce3:\n        dependencies: org.typelevel::cats-effect:jar:3.4.8\n    scala:\n      version: 2.13.0\n    platform:\n      name: jvm\n")),(0,l.kt)("p",null,"The project structure is the same at the ",(0,l.kt)("inlineCode",{parentName:"p"},"projects"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"cross")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"template")," levels.\nProjects are treated as sets of data, and settings from the different levels are merged with reliable semantics in case of conflicts."),(0,l.kt)("h2",{id:"build-as-data"},"Build as data"),(0,l.kt)("p",null,"I agree that build tools should be pure data.\nThis way you can load the build instantly, you can merge, rewrite, patch builds with ease."),(0,l.kt)("p",null,'By adopting the portable, non-verbose Bloop model, "build as data" is the core of bleep.'),(0,l.kt)("h2",{id:"when-build-as-data-is-not-enough"},"When build as data is not enough"),(0,l.kt)("p",null,"I get it. You ",(0,l.kt)("em",{parentName:"p"},"need")," to, say, upper-case all class file names before you package them.\nOr something like that. In any case, code as data is not enough."),(0,l.kt)("p",null,"In my mind there is a solution which is so simple and so elegant. You write code!\nYou absolutely do not embed that code in your build, but you let code load the build. As data of course!"),(0,l.kt)("p",null,"Enter scripts:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"projects:\n  my-scripts:\n    platform:\n      name: jvm\nscripts:\n  uppercase-and-package:\n    main: mypackage.UppercaseAndPackage\n    project: my-scripts\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"mypackage.UppercaseAndPackage")," is a completely normal Java or Scala class with completely normal main method.\nWhich means you can use your IDE to write it, debug it, test it, and so on."),(0,l.kt)("p",null,"Optionally you can include ",(0,l.kt)("inlineCode",{parentName:"p"},"bleep")," code to load and manipulate the build, as a completely normal dependency in a completely normal project."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"projects:\n  my-scripts:\n    dependencies: build.bleep::bleep-core:${BLEEP_VERSION}\n")),(0,l.kt)("p",null,"If you want you can even do transformations of the build, and load that instead.\nHere is an example of a script which upper-cases all project names."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'object CompileUppercaseProjects {\n  val rewrite = new BuildRewrite {\n    override val name = BuildRewriteName("uppercase-projects")\n\n    override protected def newExplodedProjects(oldBuild: Build): Map[CrossProjectName, Project] =\n      oldBuild.explodedProjects.map { case (k, v) => uppercase(k) -> v.copy(dependsOn = v.dependsOn.map(uppercase)) }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val (commonOpts, _) = CommonOpts.parse(args.toList)\n\n    bootstrap.forScript(scriptName = "compile-uppercase-projects", commonOpts, List(rewrite)) { (started, commands) =>\n      commands.compile(List(started.build.explodedProjects.keys.last))\n    }\n  }\n}\n')),(0,l.kt)("p",null,"You can obviously write that build back to file:\n(though the output is less pretty than the input, for now)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"bleep.yaml.writeShortened(\n  started.build.requireFileBacked(scriptName).file,\n  started.buildPaths.bleepYamlFile\n)\n")),(0,l.kt)("p",null,"This is where the model is at now, and I think I can leave it to your imagination to see where it can (and can not) go."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Share templates for all your projects? Sure, let's extend ",(0,l.kt)("inlineCode",{parentName:"li"},"bleep")," with some download/merge build functionality"),(0,l.kt)("li",{parentName:"ul"},"Share scripts? Sure, publish them as library, use git submodules, or whatever you want"),(0,l.kt)("li",{parentName:"ul"},"Write a script to bump a dependency across all your builds? Sure, hack up a script which loads the yaml files and writes them back")),(0,l.kt)("h2",{id:"developer-experience"},"Developer experience"),(0,l.kt)("p",null,"The model wasn't necessarily the reason why I started bleep, developer experience (DX) was!"),(0,l.kt)("h3",{id:"performance-performance-performance"},"Performance, performance, performance"),(0,l.kt)("p",null,"The build tool needs to load ",(0,l.kt)("em",{parentName:"p"},"instantly"),". Milliseconds.\nProject reloads should be instant.\nTab-completion should be instant.\nEverything should be instant."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"bleep")," is fast not by implementation (it has not been optimized, at all), but by design:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"It is compiled with GraalVM native-image"),(0,l.kt)("li",{parentName:"ul"},'The loading of the build is just parsing a yaml file, and then "exploding" the projects into their full form.')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# loading a small build\n$ time bleep projects>/dev/null\nbleep projects > /dev/null  0.01s user 0.02s system 34% cpu 0.094 total\n\n# loading a huge build (tapir)\n$ time bleep projects>/dev/null\nbleep projects > /dev/null  0.03s user 0.03s system 80% cpu 0.067 total\n")),(0,l.kt)("h4",{id:"there-are-two-things-which-can-be-slow-in-bleep"},"There are two things which can be slow in ",(0,l.kt)("inlineCode",{parentName:"h4"},"bleep"),":"),(0,l.kt)("h5",{id:"resolving-dependencies"},"Resolving dependencies"),(0,l.kt)("p",null,'To mitigate this, the "dependency language" has shed some ',(0,l.kt)("inlineCode",{parentName:"p"},"ivy"),"isms for cacheability.\nAnd it is cached to disk, of course"),(0,l.kt)("h5",{id:"starting-a-jvm"},"Starting a JVM"),(0,l.kt)("p",null,"The idea is that you pay for what you use. Switching from one branch to another? Instant project reload!"),(0,l.kt)("p",null,"Running the script to build your docker image after upper-casing the class file names? You're paying the JVM startup cost."),(0,l.kt)("p",null,"The important thing is that all the most frequent tasks are fast!"),(0,l.kt)("h3",{id:"usability"},"Usability"),(0,l.kt)("p",null,"There are so many things here. For instance:"),(0,l.kt)("h4",{id:"creating-a-build-should-be-trivial"},"Creating a build should be trivial"),(0,l.kt)("p",null,"Running bleep in a directory gives you the option of importing from sbt or creating a new build."),(0,l.kt)(s.F,{src:o.Z,cols:100,rows:30,fit:"width",mdxType:"AsciinemaPlayer"}),(0,l.kt)("h4",{id:"file-system-matters"},"File system matters"),(0,l.kt)("p",null,"You can ",(0,l.kt)("inlineCode",{parentName:"p"},"cd")," into subdirectories to work on a subset of your build"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ bleep projects|wc -l\n565\n$ cd json\n$ bleep projects|wc -l\n90\n")),(0,l.kt)("h4",{id:"tab-completion"},"Tab completion"),(0,l.kt)("p",null,"bleep instantly tab-completes all commands, projects, scripts and options for ",(0,l.kt)("inlineCode",{parentName:"p"},"bash")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"zsh")," (so far)"),(0,l.kt)("h4",{id:"you-can-easily-mount-a-subset-of-projects-into-your-ide"},"You can easily mount a subset of projects into your IDE"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"bleep setup-ide js3 # picks all projects which have a `js3` cross\n")),(0,l.kt)("h4",{id:"ide-reloads-automatically"},"IDE reloads automatically"),(0,l.kt)("p",null,"This really only works in metals right now, but it is a huge DX improvement."),(0,l.kt)("video",{controls:"true",src:"https://user-images.githubusercontent.com/4439335/218695611-7ed2f5f5-5238-4bea-9973-33c392621dad.mp4",width:"700px"}),(0,l.kt)("h2",{id:"migration-strategy"},"Migration strategy"),(0,l.kt)("p",null,"Nobody sits down and rewrites their builds manually.\nThis is why Mill, even though it is vastly better than Sbt, has not gained enough traction."),(0,l.kt)("p",null,"Bleep on the other hand can piggyback on the existing bloop export from sbt!\n",(0,l.kt)("inlineCode",{parentName:"p"},"sbt bloopInstall")," generates a bunch of json files, bleep can read those and generate a bleep yaml file."),(0,l.kt)("p",null,"Here is a demo where zio-http is downloaded, imported and tested with bleep."),(0,l.kt)(s.F,{src:i.Z,cols:100,rows:30,fit:"width",mdxType:"AsciinemaPlayer"}),(0,l.kt)("p",null,"As you can see it provides one-command import, so you can test ",(0,l.kt)("inlineCode",{parentName:"p"},"bleep")," right away.\nIf you like it, there is some more work to do:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"the import generates makeshift resource generation scripts if your sbt build produces any.\nThese are completely static, so you'll need to write code and use plugins to make them dynamic again.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"you need to write scripts for your own use cases."))),(0,l.kt)("p",null,"For instance, in the ",(0,l.kt)("inlineCode",{parentName:"p"},"bleep")," repo there are scripts for:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"publish to maven central"),(0,l.kt)("li",{parentName:"ul"},"build native-images"),(0,l.kt)("li",{parentName:"ul"},"generate video"),(0,l.kt)("li",{parentName:"ul"},"generate documentation")))}h.isMDXComponent=!0},2876:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"c671a47e641e4d3df75335173a33491c.cast"},6182:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"f7fb1f81eada9ccd43ba3edf299bc2a1.cast"}}]);